#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
caelusDebugSwitchesEnv = globalEnv.Clone()

# Path to source
src = caelusDebugSwitchesEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this executable
#===============================================================================
caelusDebugSwitchesEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this executable
#===============================================================================
lib_inc = [src + '/dynamicMesh/lnInclude'
]
caelusDebugSwitchesEnv.Prepend(CPPPATH = lib_inc)

#===============================================================================
# Additions to link library paths for this executable
#===============================================================================
lib_link_path = []
caelusDebugSwitchesEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this executable
#===============================================================================
if caelusDebugSwitchesEnv['WHICH_OS'] == "windows":
  caelusDebugSwitchesEnv.Prepend(LINKFLAGS = ' -u genericPatchFieldsLoad -u compressibleLESModelsLoad -u compressibleRASModelsLoad -u distributionModelsLoad -u incompressibleLESModelsLoad -u incompressibleRASModelsLoad -u interfacePropertiesLoad -u lagrangianIntermediateLoad')
  lib_link = ['libautoMesh','libbarotropicCompressibilityModel',
  'libbasicSolidThermo','libbasicThermophysicalModels','libblockMesh',
  'libchemistryModel','libcoalCombustion','libcompressibleLESModels',
  'libcompressibleRASModels','libcompressibleTurbulenceModel','libconversion',
  'libdecompositionMethods','libdistributed','libdistributionModels',
  'libdynamicFvMesh','libdynamicMesh','libedgeMesh',
  'libfieldFunctionObjects','libCAELUSCalcFunctions','libforces',
  'libfvMotionSolvers','libgenericPatchFields','libincompressibleLESModels',
  'libincompressibleRASModels','libincompressibleTransportModels',
  'libincompressibleTurbulenceModel','libinterfaceProperties',
  'libIOFunctionObjects','libjobControl','liblagrangian',
  'liblagrangianIntermediate','liblaminarFlameSpeedModels','libLESdeltas',
  'libLESfilters','libliquidMixtureProperties','libliquidProperties',
  'libODE',
  'libradiationModels','librandomProcesses','libreactionThermophysicalModels',
  'libreconstruct','libsampling','libSLGThermo','libsolidMixtureProperties',
  'libsolidParticle','libsolidProperties','libsolid',
  'libspecie','libsurfaceFilmModels','libsurfMesh','libsystemCall',
  'libthermalPorousZone','libthermophysicalFunctions','libtopoChangerFvMesh',
  'libtwoPhaseInterfaceProperties','libutilityFunctionObjects']
else:
  lib_link = ['autoMesh','barotropicCompressibilityModel','basicSolidThermo',
  'basicThermophysicalModels','blockMesh','chemistryModel','coalCombustion',
  'compressibleLESModels','compressibleRASModels',
  'compressibleTurbulenceModel','conversion','decompositionMethods',
  'distributed','distributionModels','dynamicFvMesh','dynamicMesh',
  'edgeMesh','fieldFunctionObjects','CAELUSCalcFunctions','forces',
  'fvMotionSolvers','genericPatchFields','incompressibleLESModels',
  'incompressibleRASModels','incompressibleTransportModels',
  'incompressibleTurbulenceModel','interfaceProperties','IOFunctionObjects',
  'jobControl','lagrangian','lagrangianIntermediate',
  'laminarFlameSpeedModels','LESdeltas','LESfilters',
  'liquidMixtureProperties','liquidProperties'
  ,'ODE','radiationModels','randomProcesses',
  'reactionThermophysicalModels','reconstruct','sampling','SLGThermo',
  'solidMixtureProperties','solidParticle','solidProperties','solid',
  'specie','surfaceFilmModels','surfMesh','systemCall','thermalPorousZone',
  'thermophysicalFunctions','topoChangerFvMesh','twoPhaseInterfaceProperties',
  'utilityFunctionObjects'   
]
caelusDebugSwitchesEnv.Append(LIBS = lib_link)

#===============================================================================
# Sources for this executable
#===============================================================================
src_files = Split("""
  caelusDebugSwitches.cpp
  """)

#===============================================================================
# Build this executable
#===============================================================================
bincaelusDebugSwitches = caelusDebugSwitchesEnv.Program(target = 'caelusDebugSwitches', 
source = src_files)

#===============================================================================
# Install this executable
#===============================================================================
install_dir = caelusDebugSwitchesEnv['BIN_PLATFORM_INSTALL']
caelusDebugSwitchesEnv.Alias('install', install_dir)
caelusDebugSwitchesEnv.Install(install_dir, bincaelusDebugSwitches)
