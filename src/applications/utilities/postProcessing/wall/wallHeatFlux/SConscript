#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
wallHeatFluxEnv = globalEnv.Clone()

# Path to source
src = wallHeatFluxEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this executable
#===============================================================================
wallHeatFluxEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this executable
#===============================================================================
lib_inc = [src + '/turbulenceModels',
src + '/turbulenceModels/compressible/turbulenceModel/lnInclude',
src + '/turbulenceModels/compressible/RAS/lnInclude',
src + '/turbulenceModels/compressible/RAS/RASModel',
src + '/thermophysicalModels/specie/lnInclude',
src + '/thermophysicalModels/reactionThermo/lnInclude',
src + '/thermophysicalModels/basic/lnInclude'
]
wallHeatFluxEnv.Prepend(CPPPATH = lib_inc)

#===============================================================================
# Additions to link library paths for this executable
#===============================================================================
lib_link_path = []
wallHeatFluxEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this executable
#===============================================================================
if wallHeatFluxEnv['WHICH_OS'] == "windows":
  wallHeatFluxEnv.Prepend(LINKFLAGS = ' -u genericPatchFieldsLoad -u compressibleRASModelsLoad')
  lib_link = ['libgenericPatchFields','libcompressibleRASModels',
  'libreactionThermophysicalModels','libspecie','libbasicThermophysicalModels',
  'libcompressibleTurbulenceModel']
else:
  lib_link = ['genericPatchFields','compressibleRASModels',
  'reactionThermophysicalModels','specie','basicThermophysicalModels',
  'compressibleTurbulenceModel']

wallHeatFluxEnv.Append(LIBS = lib_link)

#===============================================================================
# Sources for this executable
#===============================================================================
src_files = Split("""
 wallHeatFlux.cpp
  """)

#===============================================================================
# Build this executable
#===============================================================================
binwallHeatFlux=wallHeatFluxEnv.Program(target = 'wallHeatFlux', 
source = src_files)

#===============================================================================
# Install this executable
#===============================================================================
install_dir =wallHeatFluxEnv['BIN_PLATFORM_INSTALL']
wallHeatFluxEnv.Alias('install', install_dir)
wallHeatFluxEnv.Install(install_dir, binwallHeatFlux)
