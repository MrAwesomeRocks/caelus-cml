#import os
#import sys
#import platform
#import subprocess
#import re

from Caelus.build import *
import Caelus

#===============================================================================
# Extra include path(s)
#===============================================================================
globalEnv.Append(CPPPATH = ['lnInclude', '.'])

#===============================================================================
# Extra linker flags
#===============================================================================

#===============================================================================
# Extra link library path(s)
#===============================================================================
if Caelus.WHICH_OS == "windows" :
   globalEnv.Append(LIBPATH = [''])

elif Caelus.WHICH_OS == "darwin" :
   globalEnv.Append(LIBPATH = [Caelus.MPI_LIB])

else :
   globalEnv.Append(LIBPATH = [Caelus.MPI_LIB])

#===============================================================================
# Extra link library(ies)
#===============================================================================
if Caelus.WHICH_OS == "windows" :
   globalEnv.Append(LIBS = ['core'])
  
elif Caelus.WHICH_OS == "darwin" :
   globalEnv.Append(LIBS = ['pthread', 'core'])

else :
   globalEnv.Append(LIBS = ['core'])

#===============================================================================
# Sub-directories to traverse for compile
#===============================================================================
subdirs = [
   'solvers/basic/potentialSolver',
   'solvers/heatTransfer/buoyantBoussinesqSimpleSolver',
   'solvers/heatTransfer/buoyantSimpleSolver',
   'solvers/incompressible/simpleSolver',
   'solvers/incompressible/simpleSolver/SRFSimpleSolver',
   'solvers/incompressible/pisoSolver',
   'solvers/incompressible/pimpleSolver',
   'solvers/incompressible/pimpleSolver/SRFPimpleSolver',
   'solvers/incompressible/pimpleSolver/pimpleDyMSolver',
   'solvers/compressible/PBNS/cpbnsLTS',
   'solvers/compressible/PBNS/cpbnsPIMPLE',
   'solvers/compressible/PBNS/cpbnsSIMPLE',
   'solvers/compressible/DBNS/explicitDBNSSolver',
   'solvers/multiphase/vofSolver',
   'solvers/multiphase/vofLPTSolver',
   'utilities/mesh/advanced/autoRefineMesh',
   'utilities/mesh/advanced/collapseEdges',
   'utilities/mesh/advanced/combinePatchFaces',
   'utilities/mesh/advanced/modifyMesh',
   'utilities/mesh/advanced/refineHexMesh',
   'utilities/mesh/advanced/refinementLevel',
   'utilities/mesh/advanced/refineWallLayer',
   'utilities/mesh/advanced/removeFaces',
   'utilities/mesh/advanced/selectCells',
   'utilities/mesh/advanced/splitCells',
   'utilities/mesh/generation/blockMesh', 
   'utilities/mesh/generation/extrude/extrudeModel',
   'utilities/mesh/generation/extrude/extrudeMesh',
   'utilities/mesh/generation/extrude/extrudeToRegionMesh', 
   'utilities/mesh/conversion/caelusMeshToFluent',
   'utilities/mesh/conversion/fluent3DMeshToCAELUS',
   'utilities/mesh/conversion/fluentMeshToCAELUS',
   'utilities/mesh/conversion/caelusToSurface',
   'utilities/mesh/conversion/mshToCAELUS',
   'utilities/mesh/conversion/writeMeshObj',
   'utilities/mesh/manipulation/attachMesh',
   'utilities/mesh/manipulation/autoPatch',
   'utilities/mesh/manipulation/checkMesh',
   'utilities/mesh/manipulation/createBaffles',
   'utilities/mesh/manipulation/createBaffles_old',
   'utilities/mesh/manipulation/createPatch',
   'utilities/mesh/manipulation/deformedGeom',
   'utilities/mesh/manipulation/flattenMesh',
   'utilities/mesh/manipulation/insideCells',
   'utilities/mesh/manipulation/mergeMeshes',
   'utilities/mesh/manipulation/mergeOrSplitBaffles',
   'utilities/mesh/manipulation/mirrorMesh',
   'utilities/mesh/manipulation/moveDynamicMesh',
   'utilities/mesh/manipulation/moveMesh',
   'utilities/mesh/manipulation/objToVTK',
   'utilities/mesh/manipulation/polyDualMesh',
   'utilities/mesh/manipulation/refineMesh',
   'utilities/mesh/manipulation/renumberMesh',
   'utilities/mesh/manipulation/rotateMesh',
   'utilities/mesh/manipulation/setSet',
   'utilities/mesh/manipulation/setsToZones',
   'utilities/mesh/manipulation/singleCellMesh',
   'utilities/mesh/manipulation/splitMesh',
   'utilities/mesh/manipulation/splitMeshRegions',
   'utilities/mesh/manipulation/stitchMesh',
   'utilities/mesh/manipulation/subsetMesh',
   'utilities/mesh/manipulation/topoSet',
   'utilities/mesh/manipulation/transformPoints',
   'utilities/mesh/manipulation/zipUpMesh',
   'utilities/miscellaneous/caelusDebugSwitches',
   'utilities/miscellaneous/caelusFormatConvert',
   'utilities/miscellaneous/patchSummary',
   'utilities/parallelProcessing/decomposePar',
   'utilities/parallelProcessing/reconstructPar',
   'utilities/parallelProcessing/redistributePar',
   'utilities/parallelProcessing/reconstructParMesh',
   'utilities/postProcessing/dataConversion/caelusDataToFluent',
   'utilities/postProcessing/dataConversion/caelusToEnsight',
   'utilities/postProcessing/dataConversion/caelusToEnsightParts',
   'utilities/postProcessing/dataConversion/caelusToTetDualMesh',
   'utilities/postProcessing/dataConversion/caelusToVTK',
   'utilities/postProcessing/caelusCalc',
   'utilities/postProcessing/lagrangian/particleTracks',
   'utilities/postProcessing/lagrangian/steadyParticleTracks',
   'utilities/postProcessing/miscellaneous/execFlowFunctionObjects',
   'utilities/postProcessing/miscellaneous/caelusListTimes',
   'utilities/postProcessing/miscellaneous/postChannel',
   'utilities/postProcessing/miscellaneous/ptot',
   'utilities/postProcessing/miscellaneous/temporalInterpolate',
   'utilities/postProcessing/miscellaneous/wdot',
   'utilities/postProcessing/miscellaneous/writeCellCentres',
   'utilities/postProcessing/patch/patchAverage',
   'utilities/postProcessing/patch/patchIntegrate',
   'utilities/postProcessing/sampling/probeLocations',
   'utilities/postProcessing/sampling/sample',
   'utilities/postProcessing/scalarField/pPrime2',
   'utilities/postProcessing/stressField/stressComponents',
   'utilities/postProcessing/turbulence/R',
   'utilities/postProcessing/turbulence/createTurbulenceFields',
   'utilities/postProcessing/velocityField/Co',
   'utilities/postProcessing/velocityField/enstrophy',
   'utilities/postProcessing/velocityField/flowType',
   'utilities/postProcessing/velocityField/Lambda2',
   'utilities/postProcessing/velocityField/Mach',
   'utilities/postProcessing/velocityField/Pe',
   'utilities/postProcessing/velocityField/Q',
   'utilities/postProcessing/velocityField/streamFunction',
   'utilities/postProcessing/velocityField/uprime',
   'utilities/postProcessing/velocityField/vorticity',
   'utilities/postProcessing/wall/wallGradU',
   'utilities/postProcessing/wall/wallHeatFlux',
   'utilities/postProcessing/wall/wallShearStress',
   'utilities/postProcessing/wall/yPlusLES',
   'utilities/postProcessing/wall/yPlusRAS',
   'utilities/preProcessing/changeDictionary',
   'utilities/preProcessing/mapFields',
   'utilities/preProcessing/setFields'
]

#===============================================================================
# Execute SConscript files in each sub-directory
#===============================================================================
for dir in subdirs:
  if GetOption('clean'):
    print ">> Removing lnInclude directory for " + dir
    subprocess.call(['python', 
    Caelus.CAELUS_PROJECT_DIR + '/bin/cleanLnInclude.py', '-s', dir])
    SConscript( os.path.join(dir, 'SConscript'), exports = ['globalEnv'])
	
  else:
    print ">> Creating lnInclude directory for " + dir
    subprocess.call(['python', 
    Caelus.CAELUS_PROJECT_DIR + '/bin/createLnInclude.py', '-s', dir])
    SConscript( os.path.join(dir, 'SConscript'), exports = ['globalEnv'])

#===============================================================================
# That's All Folks!
#===============================================================================
