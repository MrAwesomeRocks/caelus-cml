#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
convEnv = globalEnv.Clone()

# Path to source
src = convEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this library
#===============================================================================
convEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this library
#===============================================================================
lib_inc = ['lnInclude']
convEnv.Prepend(CPPPATH = lib_inc)

#===============================================================================
# Additions to link library paths for this library
#===============================================================================
lib_link_path = [] 
convEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this library
#===============================================================================
lib_link = ['core'] 
convEnv.Append(LIBS = lib_link)

#===============================================================================
# Sources for this library
#===============================================================================
src_files = Split("""
  ensight/file/ensightFile.cpp
  ensight/file/ensightGeoFile.cpp
  ensight/part/ensightPart.cpp
  ensight/part/ensightPartIO.cpp
  ensight/part/ensightPartCells.cpp
  ensight/part/ensightPartFaces.cpp
  ensight/part/ensightParts.cpp
  meshTables/boundaryRegion.cpp
  meshTables/cellTable.cpp
  meshReader/meshReader.cpp
  meshReader/meshReaderAux.cpp
  meshReader/calcPointCells.cpp
  meshReader/createPolyCells.cpp
  meshReader/createPolyBoundary.cpp
  meshReader/starcd/STARCDMeshReader.cpp
  meshWriter/meshWriter.cpp
  meshWriter/starcd/STARCDMeshWriter.cpp
  polyDualMesh/polyDualMesh.cpp
  """)

#===============================================================================
# Build this library
#===============================================================================
libconversion = convEnv.SharedLibrary(target = 'conversion', 
source = src_files)

#===============================================================================
# Install this library
#===============================================================================
install_dir = convEnv['LIB_PLATFORM_INSTALL']
convEnv.Alias('install', install_dir)
convEnv.Install(install_dir, libconversion)

if (convEnv['WHICH_OS'] == "darwin"):

  convEnv.Append(SHLINKFLAGS ='-install_name @executable_path/../lib/libconversion.dylib')
