#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
turbCompModelEnv = globalEnv.Clone()

# Path to source
src = turbCompModelEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this library
#===============================================================================
turbCompModelEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this library
#===============================================================================
lib_inc = ['lnInclude', src + '/turbulenceModels', 
src + '/thermophysicalModels/basic/lnInclude',  
src + '/thermophysicalModels/specie/lnInclude',  
src + '/thermophysicalModels/basicSolidThermo/lnInclude',
src + '/thermophysicalModels/solid/lnInclude' 
]
turbCompModelEnv.Prepend(CPPPATH = lib_inc)
       
#===============================================================================
# Additions to link library paths for this library
#===============================================================================
lib_link_path = [] 
turbCompModelEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this library
#===============================================================================
lib_link = ['core','solid','specie','radiationModels',
'basicThermophysicalModels','basicSolidThermo']
turbCompModelEnv.Append(LIBS = lib_link)
       
#===============================================================================
# Sources for this library
#===============================================================================
src_files = Split("""
  turbulenceModel.cpp
  laminar/laminar.cpp
  derivedFvPatchFields/turbulentHeatFluxTemperature/turbulentHeatFluxTemperatureFvPatchScalarField.cpp
  derivedFvPatchFields/temperatureCoupledBase/temperatureCoupledBase.cpp
  derivedFvPatchFields/turbulentTemperatureCoupledBaffle/turbulentTemperatureCoupledBaffleFvPatchScalarField.cpp
  derivedFvPatchFields/turbulentTemperatureCoupledBaffleMixed/turbulentTemperatureCoupledBaffleMixedFvPatchScalarField.cpp
  derivedFvPatchFields/turbulentTemperatureCoupledBaffle/regionProperties.cpp
  derivedFvPatchFields/temperatureThermoBaffle1D/temperatureThermoBaffle1DFvPatchScalarFields.cpp
  derivedFvPatchFields/totalFlowRateAdvectiveDiffusive/totalFlowRateAdvectiveDiffusiveFvPatchScalarField.cpp
  derivedFvPatchFields/turbulentTemperatureRadCoupledMixed/turbulentTemperatureRadCoupledMixedFvPatchScalarField.cpp
  derivedFvPatchFields/externalWallHeatFluxTemperature/externalWallHeatFluxTemperatureFvPatchScalarField.cpp
  """)

#===============================================================================
# Build this library
#===============================================================================
libcompressibleTurbulenceModel = turbCompModelEnv.SharedLibrary(target = 
'compressibleTurbulenceModel', source = src_files)

#===============================================================================
# Install this library
#===============================================================================
install_dir = turbCompModelEnv['LIB_PLATFORM_INSTALL']
turbCompModelEnv.Alias('install', install_dir)
turbCompModelEnv.Install(install_dir, libcompressibleTurbulenceModel)

if (turbCompModelEnv['WHICH_OS'] == "darwin"):

  turbCompModelEnv.Append(SHLINKFLAGS ='-install_name @' + turbCompModelEnv['LIB_PLATFORM_INSTALL'] + '/libcompressibleTurbulenceModel.dylib')
