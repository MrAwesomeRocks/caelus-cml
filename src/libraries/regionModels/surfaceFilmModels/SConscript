#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
surfFilmEnv = globalEnv.Clone()

# Path to source
src = surfFilmEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this library
#===============================================================================
surfFilmEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this library
#===============================================================================
lib_inc = ['lnInclude',
src + '/turbulenceModels',   
src + '/thermophysicalModels/basic/lnInclude',
src + '/thermophysicalModels/specie/lnInclude',
src + '/thermophysicalModels/reactionThermo/lnInclude',
src + '/thermophysicalModels/SLGThermo/lnInclude',
src + '/thermophysicalModels/properties/liquidProperties/lnInclude',
src + '/thermophysicalModels/properties/liquidMixtureProperties/lnInclude',
src + '/thermophysicalModels/properties/solidProperties/lnInclude',
src + '/thermophysicalModels/properties/solidMixtureProperties/lnInclude',
src + '/turbulenceModels/compressible/turbulenceModel/lnInclude', 
src + '/turbulenceModels/compressible/LES/lnInclude', 
src + '/turbulenceModels/compressible/RAS/lnInclude',  
src + '/regionModels/regionModel/lnInclude',
src + '/lagrangian/distributionModels/lnInclude' 
] 
surfFilmEnv.Prepend(CPPPATH = lib_inc)

#===============================================================================
# Additions to link library paths for this library
#===============================================================================
lib_link_path = []
surfFilmEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this library
#===============================================================================
lib_link = ['core','basicThermophysicalModels','specie',
'liquidProperties','liquidMixtureProperties','solidProperties',
'solidMixtureProperties','reactionThermophysicalModels','SLGThermo',
'distributionModels','compressibleTurbulenceModel','compressibleRASModels',
'compressibleLESModels','regionModels'
]
surfFilmEnv.Append(LIBS = lib_link)
      
#===============================================================================
# Sources for this library
#===============================================================================
src_files = Split("""
  surfaceFilmModel/surfaceFilmModel.cpp
  surfaceFilmModel/surfaceFilmModelNew.cpp
  noFilm/noFilm.cpp
  kinematicSingleLayer/kinematicSingleLayer.cpp
  thermoSingleLayer/thermoSingleLayer.cpp
  submodels/subModelBase.cpp
  submodels/kinematic/force/force/force.cpp
  submodels/kinematic/force/force/forceNew.cpp
  submodels/kinematic/force/forceList/forceList.cpp
  submodels/kinematic/force/contactAngleForce/contactAngleForce.cpp
  submodels/kinematic/force/surfaceShearForce/surfaceShearForce.cpp
  submodels/kinematic/force/thermocapillaryForce/thermocapillaryForce.cpp
  submodels/kinematic/injectionModel/injectionModel/injectionModel.cpp
  submodels/kinematic/injectionModel/injectionModel/injectionModelNew.cpp
  submodels/kinematic/injectionModel/injectionModelList/injectionModelList.cpp
  submodels/kinematic/injectionModel/drippingInjection/drippingInjection.cpp
  submodels/kinematic/injectionModel/removeInjection/removeInjection.cpp
  submodels/kinematic/injectionModel/curvatureSeparation/curvatureSeparation.cpp
  submodels/thermo/phaseChangeModel/phaseChangeModel/phaseChangeModel.cpp
  submodels/thermo/phaseChangeModel/phaseChangeModel/phaseChangeModelNew.cpp
  submodels/thermo/phaseChangeModel/noPhaseChange/noPhaseChange.cpp
  submodels/thermo/phaseChangeModel/standardPhaseChange/standardPhaseChange.cpp
  submodels/thermo/heatTransferModel/heatTransferModel/heatTransferModel.cpp
  submodels/thermo/heatTransferModel/heatTransferModel/heatTransferModelNew.cpp
  submodels/thermo/heatTransferModel/constantHeatTransfer/constantHeatTransfer.cpp
  submodels/thermo/heatTransferModel/mappedConvectiveHeatTransfer/mappedConvectiveHeatTransfer.cpp
  submodels/thermo/filmRadiationModel/filmRadiationModel/filmRadiationModel.cpp
  submodels/thermo/filmRadiationModel/filmRadiationModel/filmRadiationModelNew.cpp
  submodels/thermo/filmRadiationModel/noRadiation/noRadiation.cpp
  submodels/thermo/filmRadiationModel/standardRadiation/standardRadiation.cpp
  derivedFvPatchFields/filmHeightInletVelocity/filmHeightInletVelocityFvPatchVectorField.cpp
  derivedFvPatchFields/wallFunctions/alphatFilmWallFunction/alphatFilmWallFunctionFvPatchScalarField.cpp
  derivedFvPatchFields/wallFunctions/mutkFilmWallFunction/mutkFilmWallFunctionFvPatchScalarField.cpp
  """) 

#===============================================================================
# Build this library
#===============================================================================
libsurfaceFilmModels = surfFilmEnv.SharedLibrary(target = 
'surfaceFilmModels', source = src_files)

#===============================================================================
# Install this library
#===============================================================================
install_dir = surfFilmEnv['LIB_PLATFORM_INSTALL']
surfFilmEnv.Alias('install', install_dir)
surfFilmEnv.Install(install_dir, libsurfaceFilmModels)

if (surfFilmEnv['WHICH_OS'] == "darwin"):

  surfFilmEnv.Append(SHLINKFLAGS ='-install_name @' + surfFilmEnv['LIB_PLATFORM_INSTALL'] + '/libsurfaceFilmModels.dylib')
