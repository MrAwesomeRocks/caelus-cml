#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
thermoBaffEnv = globalEnv.Clone()

# Path to source
src = thermoBaffEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this library
#===============================================================================
thermoBaffEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this library
#===============================================================================
lib_inc = ['lnInclude',
src + '/sampling/lnInclude', 
src + '/AMIInterpolation/lnInclude',
src + '/regionModels/regionModel/lnInclude',   
src + '/thermophysicalModels/basic/lnInclude',
src + '/thermophysicalModels/specie/lnInclude',
src + '/thermophysicalModels/solid/lnInclude',
src + '/thermophysicalModels/basicSolidThermo/lnInclude',
src + '/turbulenceModels/compressible/turbulenceModel/lnInclude'
] 
thermoBaffEnv.Prepend(CPPPATH = lib_inc)
    
#===============================================================================
# Additions to link library paths for this library
#===============================================================================
lib_link_path = []
thermoBaffEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this library
#===============================================================================
lib_link = ['core','solid','regionModels',
'basicSolidThermo','compressibleTurbulenceModel' 
]
thermoBaffEnv.Append(LIBS = lib_link)
       
#===============================================================================
# Sources for this library
#===============================================================================
src_files = Split("""
  thermoBaffleModel/thermoBaffleModel.cpp
  thermoBaffleModel/thermoBaffleModelNew.cpp
  thermoBaffle2D/thermoBaffle2D.cpp
  noThermo/noThermo.cpp
  derivedFvPatchFields/temperatureThermoBaffle/temperatureThermoBaffleFvPatchScalarField.cpp
  """)

#===============================================================================
# Build this library
#===============================================================================
libthermoBaffleModels = thermoBaffEnv.SharedLibrary(target = 
'thermoBaffleModels', source = src_files)

#===============================================================================
# Install this library
#===============================================================================
install_dir = thermoBaffEnv['LIB_PLATFORM_INSTALL']
thermoBaffEnv.Alias('install', install_dir)
thermoBaffEnv.Install(install_dir, libthermoBaffleModels)

if (thermoBaffEnv['WHICH_OS'] == "darwin"):

  thermoBaffEnv.Append(SHLINKFLAGS ='-install_name @' + thermoBaffEnv['LIB_PLATFORM_INSTALL'] + '/libthermoBaffleModels.dylib')
