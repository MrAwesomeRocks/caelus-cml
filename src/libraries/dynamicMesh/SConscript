#Copyright (C) 2014 Applied CCM
import subprocess
Import('globalEnv')

# Clone the global environment so changes made he are not pass onto subsequent 
# libraries
dynamicEnv = globalEnv.Clone()

# Path to source
src = dynamicEnv['LIB_SRC']

#===============================================================================
# Additions to compiler flags for this library
#===============================================================================
dynamicEnv.Append(CCFLAGS = '')

#===============================================================================
# Additions to include directories for this library
#===============================================================================
lib_inc = ['lnInclude']
dynamicEnv.Prepend(CPPPATH = lib_inc)

#===============================================================================
# Additions to link library paths for this library
#===============================================================================
lib_link_path = []
dynamicEnv.Prepend(LIBPATH = lib_link_path)

#===============================================================================
# Additions to link libraries for this library
#===============================================================================
lib_link = ['core']
dynamicEnv.Append(LIBS = lib_link)

#===============================================================================
# Sources for this library
#===============================================================================
src_files = Split("""
  attachDetach/attachDetach.cpp
  attachDetach/attachInterface.cpp
  attachDetach/detachInterface.cpp
  attachDetach/attachDetachPointMatchMap.cpp
  layerAdditionRemoval/layerAdditionRemoval.cpp
  layerAdditionRemoval/setLayerPairing.cpp
  layerAdditionRemoval/addCellLayer.cpp
  layerAdditionRemoval/removeCellLayer.cpp
  slidingInterface/enrichedPatch/enrichedPatch.cpp
  slidingInterface/enrichedPatch/enrichedPatchPointMap.cpp
  slidingInterface/enrichedPatch/enrichedPatchFaces.cpp
  slidingInterface/enrichedPatch/enrichedPatchPointPoints.cpp
  slidingInterface/enrichedPatch/enrichedPatchCutFaces.cpp
  slidingInterface/enrichedPatch/enrichedPatchMasterPoints.cpp
  polyTopoChange/polyMeshModifier/polyMeshModifier.cpp
  polyTopoChange/polyMeshModifier/polyMeshModifierNew.cpp
  polyTopoChange/polyTopoChange/topoAction/topoActions.cpp
  polyTopoChange/polyTopoChanger/polyTopoChanger.cpp
  polyTopoChange/polyTopoChange/polyTopoChange.cpp
  polyTopoChange/polyTopoChange/addPatchCellLayer.cpp
  polyTopoChange/polyTopoChange/edgeCollapser.cpp
  polyTopoChange/polyTopoChange/faceCollapser.cpp
  polyTopoChange/polyTopoChange/hexRef8.cpp
  polyTopoChange/polyTopoChange/removeCells.cpp
  polyTopoChange/polyTopoChange/removeFaces.cpp
  polyTopoChange/polyTopoChange/refinementData.cpp
  polyTopoChange/polyTopoChange/refinementDistanceData.cpp
  polyTopoChange/polyTopoChange/refinementHistory.cpp
  polyTopoChange/polyTopoChange/removePoints.cpp
  polyTopoChange/polyTopoChange/combineFaces.cpp
  polyTopoChange/polyTopoChange/localPointRegion.cpp
  polyTopoChange/polyTopoChange/duplicatePoints.cpp
  slidingInterface/slidingInterface.cpp
  slidingInterface/slidingInterfaceProjectPoints.cpp
  slidingInterface/coupleSlidingInterface.cpp
  slidingInterface/slidingInterfaceAttachedAddressing.cpp
  slidingInterface/slidingInterfaceClearCouple.cpp
  slidingInterface/decoupleSlidingInterface.cpp
  perfectInterface/perfectInterface.cpp
  boundaryMesh/boundaryMesh.cpp
  boundaryPatch/boundaryPatch.cpp
  setUpdater/setUpdater.cpp
  meshCut/meshModifiers/boundaryCutter/boundaryCutter.cpp
  meshCut/meshModifiers/meshCutter/meshCutter.cpp
  meshCut/meshModifiers/meshCutAndRemove/meshCutAndRemove.cpp
  meshCut/meshModifiers/undoableMeshCutter/undoableMeshCutter.cpp
  meshCut/meshModifiers/refinementIterator/refinementIterator.cpp
  meshCut/meshModifiers/multiDirRefinement/multiDirRefinement.cpp
  meshCut/cellLooper/cellLooper.cpp
  meshCut/cellLooper/topoCellLooper.cpp
  meshCut/cellLooper/geomCellLooper.cpp
  meshCut/cellLooper/hexCellLooper.cpp
  meshCut/directions/directions.cpp
  meshCut/directions/directionInfo/directionInfo.cpp
  meshCut/edgeVertex/edgeVertex.cpp
  meshCut/cellCuts/cellCuts.cpp
  meshCut/splitCell/splitCell.cpp
  meshCut/refineCell/refineCell.cpp
  meshCut/wallLayerCells/wallLayerCells.cpp
  meshCut/wallLayerCells/wallNormalInfo/wallNormalInfo.cpp
  polyTopoChange/attachPolyTopoChanger/attachPolyTopoChanger.cpp
  polyTopoChange/repatchPolyTopoChanger/repatchPolyTopoChanger.cpp
  fvMeshAdder/fvMeshAdder.cpp
  fvMeshDistribute/fvMeshDistribute.cpp
  polyMeshAdder/faceCoupleInfo.cpp
  polyMeshAdder/polyMeshAdder.cpp
  fvMeshTools/fvMeshTools.cpp
  motionSmoother/motionSmoother.cpp
  motionSmoother/motionSmootherCheck.cpp
  motionSmoother/polyMeshGeometry/polyMeshGeometry.cpp
  motionSolver/motionSolver.cpp
  """)

#===============================================================================
# Build this library
#===============================================================================
libdynamicMesh = dynamicEnv.SharedLibrary(target = 'dynamicMesh', 
source = src_files)

#===============================================================================
# Install this library
#===============================================================================
install_dir = dynamicEnv['LIB_PLATFORM_INSTALL']
dynamicEnv.Alias('install', install_dir)
dynamicEnv.Install(install_dir, libdynamicMesh)

if (dynamicEnv['WHICH_OS'] == "darwin"):

  dynamicEnv.Append(SHLINKFLAGS ='-install_name @executable_path/../lib/libdynamicMesh.dylib')
