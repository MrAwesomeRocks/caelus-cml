# -*- mode: python -*-

import os
from build import build_lib
Import('env')

target = 'swakFunctionObjects'

sources = Split("""
manipulateField.cpp
manipulateFieldFunctionObject.cpp
manipulatePatchField.cpp
manipulatePatchFieldFunctionObject.cpp
expressionField.cpp
expressionFieldFunctionObject.cpp
clearExpressionField.cpp
clearExpressionFieldFunctionObject.cpp
createSampledSurface.cpp
createSampledSurfaceFunctionObject.cpp
createSampledSet.cpp
createSampledSetFunctionObject.cpp
addGlobalVariable.cpp
addGlobalVariableFunctionObject.cpp
removeGlobalVariable.cpp
removeGlobalVariableFunctionObject.cpp
calculateGlobalVariables.cpp
calculateGlobalVariablesFunctionObject.cpp
addForeignMeshes.cpp
addForeignMeshesFunctionObject.cpp
foreignMeshesFollowTime.cpp
foreignMeshesFollowTimeFunctionObject.cpp
solvePDECommon.cpp
solvePDECommonFiniteVolume.cpp
solveLaplacianPDE.cpp
solveLaplacianPDEFunctionObject.cpp
solveTransportPDE.cpp
solveTransportPDEFunctionObject.cpp
""")

caelus_inc = [
'sampling/lnInclude',
'fvOptions/lnInclude',
'postProcessing/functionObjects/utilities/lnInclude',
'lagrangian/basic/lnInclude'
]

caelus_libs = [
'core',
'swakParsers',
'fvOptions',
'sampling',
'utilityFunctionObjects',
'lagrangian'
]

append_args = {}
append_args = { 'CPPPATH' : [
                  os.path.join(env['SWAK_PATH'],'swakFunctionObjects'),
                  os.path.join(env['SWAK_PATH'],'swakFunctionObjects/lnInclude'),
                  os.path.join(env['SWAK_PATH'],'swakParsers/lnInclude')
               ]
            }

build_lib(env,
          target=target,
          sources=sources,
          caelus_inc=caelus_inc,
          caelus_libs=caelus_libs,
          append_args=append_args)
